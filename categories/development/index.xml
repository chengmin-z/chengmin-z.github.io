<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on cmHubs</title>
    <link>https://zhangchengmin99.github.io/categories/development/</link>
    <description>Recent content in development on cmHubs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[ A student iOS developer in BUPT 👨🏻‍💻 ]</copyright>
    <lastBuildDate>Wed, 07 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhangchengmin99.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apple Developer Program 相关概念介绍</title>
      <link>https://zhangchengmin99.github.io/2020/10/apple-developer-program-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2020/10/apple-developer-program-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/</guid>
      <description> 引言 什么是Apple Developer Program？ </description>
    </item>
    
    <item>
      <title>iOS Core Bluetooth_3 用作中央设备的常用方法（1/2）</title>
      <link>https://zhangchengmin99.github.io/2020/10/ios-core-bluetooth_3-%E7%94%A8%E4%BD%9C%E4%B8%AD%E5%A4%AE%E8%AE%BE%E5%A4%87%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%951/2/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2020/10/ios-core-bluetooth_3-%E7%94%A8%E4%BD%9C%E4%B8%AD%E5%A4%AE%E8%AE%BE%E5%A4%87%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%951/2/</guid>
      <description>&lt;h4 id=&#34;写在前面&#34;&gt;写在前面&lt;/h4&gt;

&lt;p&gt;在蓝牙低功耗通信中发挥核心作用的设备执行许多常见任务，例如，发现并连接到可用的外围设备，以及探索外围设备所提供的数据并与之交互。实现外围角色的设备还执行许多常见的其他任务，例如发布和广告服务，以及响应来自连接的中心的读取，写入和订阅请求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Core Bluetooth_3 用作中央设备的常用方法（2/2）</title>
      <link>https://zhangchengmin99.github.io/2020/10/ios-core-bluetooth_3-%E7%94%A8%E4%BD%9C%E4%B8%AD%E5%A4%AE%E8%AE%BE%E5%A4%87%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%952/2/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2020/10/ios-core-bluetooth_3-%E7%94%A8%E4%BD%9C%E4%B8%AD%E5%A4%AE%E8%AE%BE%E5%A4%87%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%952/2/</guid>
      <description>&lt;h4 id=&#34;写在前面&#34;&gt;写在前面&lt;/h4&gt;

&lt;p&gt;在上一节中主要介绍了CoreBluetooth中中央设备的实例化、扫描与连接。这一节继续介绍，在连接设备后的查询服务与特征字段，读取、写入、订阅等操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS URL Loading System 简介</title>
      <link>https://zhangchengmin99.github.io/2020/10/ios-url-loading-system-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2020/10/ios-url-loading-system-%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h4 id=&#34;1-总览&#34;&gt;1 总览&lt;/h4&gt;

&lt;p&gt;URL Loading System 提供获取资源的能力通过URLs，使用标准https协议或者是开发者自定义的协议。使用标准Internet协议与URL交互并与服务器通信。且加载执行的过程是异步的，保证了应用界面响应与处理加载数据的同时执行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 实习面试常问问题</title>
      <link>https://zhangchengmin99.github.io/2020/10/ios-%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2020/10/ios-%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h4 id=&#34;1-说明uitableviewcell的重用机制&#34;&gt;1 说明UITableViewCell的重用机制&lt;/h4&gt;

&lt;p&gt;答：UITableView的每一行就是一个UITableViewCell，绝大多数的Cell构图都一样，只是内容不同而已。所以，可以将同一类型的Cell标记上相同的Identifier，然后用reuseIdentifier进行构建，配合不同的内容进行批量使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP、TCP/IP协议与Socket 基本知识</title>
      <link>https://zhangchengmin99.github.io/2019/12/httptcp/ip%E5%8D%8F%E8%AE%AE%E4%B8%8Esocket-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/12/httptcp/ip%E5%8D%8F%E8%AE%AE%E4%B8%8Esocket-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
      <description>1 TCP/IP 1-1 TCP/IP 概述 TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。
1-2 TCP/IP的体系结构 1-2-1 TCP/IP较OSI体系结构的改进 TCP/IP协议在一定程度上参考了OSI的体系结构。OSI模型共有七层，从下到上分别是物理层、数据链路层、网络层、运输层、会话层、表示层和应用层。但是这显然是有些复杂的，所以在TCP/IP协议中，它们被简化为了四个层次。 具体改进如下： （1）应用层、表示层、会话层三个层次提供的服务相差不是很大，所以在TCP/IP协议中，它们被合并为应用层一个层次。 （2）由于运输层和网络层在网络协议中的地位十分重要，所以在TCP/IP协议中它们被作为独立的两个层次。 （3）因为数据链路层和物理层的内容相差不多，所以在TCP/IP协议中它们被归并在网络接口层一个层次里。
只有四层体系结构的TCP/IP协议，与有七层体系结构的OSI相比要简单了不少，也正是这样，TCP/IP协议在实际的应用中效率更高，成本更低。结构图如下所示：
1-2-2 TCP/IP协议中的四个层次 1 应用层：应用层是TCP/IP协议的第一层，是直接为应用进程提供服务的。 （1）对不同种类的应用程序它们会根据自己的需要来使用应用层的不同协议，例如：邮件传输应用使用了SMTP协议、万维网应用使用了HTTP协议、远程登录服务应用使用了有TELNET协议。 （2）应用层还能加密、解密、格式化数据。 （3）应用层可以建立或解除与其他节点的联系，这样可以充分节省网络资源。
2 传输层：作为TCP/IP协议的第二层，运输层在整个TCP/IP协议中起到了中流砥柱的作用。且在运输层中，TCP和UDP也同样起到了中流砥柱的作用。
3 网络层：网络层在TCP/IP协议中的位于第三层。在TCP/IP协议中网络层可以进行网络连接的建立和终止以及IP地址的寻找等功能。
4 网络接口层：在TCP/IP协议中，网络接口层位于第四层。由于网络接口层兼并了物理层和数据链路层所以，网络接口层既是传输数据的物理媒介，也可以为网络层提供一条准确无误的线路。
1-3 狭义的TCP与IP协议 1-3-1 TCP 协议 TCP即传输控制协议，是一种面向连接的、可靠的、基于字节流的通信协议。简单来说TCP就是有确认机制的UDP协议，每发出一个数据包都要求确认，如果有一个数据包丢失，就收不到确认，发送方就必须重发这个数据包。为了保证传输的可靠性，TCP协议在UDP基础之上建立了三次对话的确认机制，即在正式收发数据前，必须和对方建立可靠的连接。TCP数据包和UDP一样，都是由首部和数据两部分组成，唯一不同的是，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。
传输层的主要工作是定义端口，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。
1-3-2 IP 协议 网络层引入了IP协议，制定了一套新地址，使得我们能够区分两台主机是否同属一个网络，这套地址就是网络地址，也就是所谓的IP地址。IP协议将这个32位的地址分为两部分，前面部分代表网络地址，后面部分表示该主机在局域网中的地址。如果两个IP地址在同一个子网内，则网络地址一定相同。为了判断IP地址中的网络地址，IP协议还引入了子网掩码，IP地址和子网掩码通过按位与运算后就可以得到网络地址。
1-4 TCP连接的过程 TCP(Transmission Control Protocol) 传输控制协议。TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手，确认建立一个连接。位码即tcp标志位，有6种 标示:SYN(synchronous建立联机) 、ACK(acknowledgement 确认) 、PSH(push传送) 、FIN(finish结束) 、RST(reset重置) 、URG(urgent紧急)Sequence number(顺序号码)、 Acknowledge number(确认号码)。
手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。建立起一个TCP连接需要经过“三次握手”：
第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。握手完成后，两台主机开始传输数据了。
握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）。整个TCP连接过程如下： 1-4-1 TCP连接实例 实例一: IP 192.</description>
    </item>
    
    <item>
      <title>Core Data基本简介（一）—— Data Model与Core Data Stack</title>
      <link>https://zhangchengmin99.github.io/2019/10/core-data%E5%9F%BA%E6%9C%AC%E7%AE%80%E4%BB%8B%E4%B8%80-data-model%E4%B8%8Ecore-data-stack/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/10/core-data%E5%9F%BA%E6%9C%AC%E7%AE%80%E4%BB%8B%E4%B8%80-data-model%E4%B8%8Ecore-data-stack/</guid>
      <description>&lt;h4 id=&#34;引言-什么是core-data&#34;&gt;引言 什么是Core Data？&lt;/h4&gt;

&lt;p&gt;Core Data 是一个对象图管理器，它定义和管理自己的对象和连接。 我们可以确定这些对象的组成以及它们之间的关系，还可以根据需要存储尽可能多的对象。 该系统负责对对象进行编码和解码，保持一致性以及以有效方式将对象图存储在文件中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Application Delegate和ViewController</title>
      <link>https://zhangchengmin99.github.io/2019/10/application-delegate%E5%92%8Cviewcontroller/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/10/application-delegate%E5%92%8Cviewcontroller/</guid>
      <description>&lt;h4 id=&#34;引言-uikit的概念&#34;&gt;引言 UIKit的概念&lt;/h4&gt;

&lt;p&gt;MVC是很多人学习App开发学习的第一种设计模式，深入理解其的含义与组成部分与相互配合，对学习开发有着至关重要的最要。本文简要介绍MVC设计模式与ViewController的相关概念，并说明Application Delegate的相关使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UIView基础介绍</title>
      <link>https://zhangchengmin99.github.io/2019/10/uiview%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/10/uiview%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h4 id=&#34;引言&#34;&gt;引言&lt;/h4&gt;

&lt;p&gt;窗口是显示图形的空间，但它本身不会产生任何可见的内容。用户界面是通过类似视图的容器在窗口内部构建的。这些视图是自定义大小的矩形区域，旨在在屏幕上显示图形。一些视图仅用作容器，而其他视图则经过改进以提供图形工具（例如按钮和开关）以及图形内容（例如图像和文本）。这些视图是按层次结构组织的，一个内部又另一个内部，以窗口大小的视图作为层次结构的根（通常称为主视图或容器视图）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS开发中容易忽略的UIKit概念</title>
      <link>https://zhangchengmin99.github.io/2019/09/ios%E5%BC%80%E5%8F%91%E4%B8%AD%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84uikit%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/09/ios%E5%BC%80%E5%8F%91%E4%B8%AD%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84uikit%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h4 id=&#34;引言-uikit的概念&#34;&gt;引言 UIKit的概念&lt;/h4&gt;

&lt;p&gt;UIKit（用户界面工具包）是为移动应用程序定义图形界面元素的框架。从文本字符串到按钮和开关，用户在屏幕上操纵以与应用程序交互的所有标准元素均由此框架中的类定义。它的主要重点是用户界面，但它也提供了应用程序需要的基本类，并与系统的其余部分连接。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS中的重要图形概念Core Graphics</title>
      <link>https://zhangchengmin99.github.io/2019/09/ios%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%9B%BE%E5%BD%A2%E6%A6%82%E5%BF%B5core-graphics/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/09/ios%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%9B%BE%E5%BD%A2%E6%A6%82%E5%BF%B5core-graphics/</guid>
      <description>&lt;h4 id=&#34;引言&#34;&gt;引言&lt;/h4&gt;

&lt;p&gt;Core Graphics框架是基于Quartz的高级绘图引擎。 它提供了无与伦比的输出保真度和轻量级2D渲染。 使用此框架可以来处理基于路径的绘图，转换，颜色管理，屏幕渲染，图案，渐变和阴影，图像数据管理，图像创建和图像蒙版，以及PDF文档的创建，显示和解析。在macOS中，Core Graphics还包括用于处理显示硬件，用户基础输入事件和窗口系统的服务。本文将重点介绍这套框架下重要的数据类型概念。（几乎是各种组件的基础，十分重要）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flutter（一）MAC环境搭建</title>
      <link>https://zhangchengmin99.github.io/2019/09/flutter%E4%B8%80mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/09/flutter%E4%B8%80mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;flutter中文网 &lt;a href=&#34;https://flutterchina.club&#34;&gt;https://flutterchina.club&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;第一步-根据中文网的介绍我们首先配置环境变量&#34;&gt;第一步：根据中文网的介绍我们首先配置环境变量&lt;/h4&gt;

&lt;p&gt;MacBook-Pro:~ TommyHan$ export PUB_HOSTED_URL=&lt;a href=&#34;https://pub.flutter-io.cn&#34;&gt;https://pub.flutter-io.cn&lt;/a&gt;&lt;br /&gt;
MacBook-Pro:~ TommyHan$ export FLUTTER_STORAGE_BASE_URL=&lt;a href=&#34;https://storage.flutter-io.cn&#34;&gt;https://storage.flutter-io.cn&lt;/a&gt;&lt;br /&gt;
注意： 此镜像为临时镜像，并不能保证一直可用，读者可以参考详情请参考 Using Flutter in China 以获得有关镜像服务器的最新动态。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用nodemcu（基于官方SDK）接入阿里云物联网平台</title>
      <link>https://zhangchengmin99.github.io/2019/09/%E4%BD%BF%E7%94%A8nodemcu%E5%9F%BA%E4%BA%8E%E5%AE%98%E6%96%B9sdk%E6%8E%A5%E5%85%A5%E9%98%BF%E9%87%8C%E4%BA%91%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhangchengmin99.github.io/2019/09/%E4%BD%BF%E7%94%A8nodemcu%E5%9F%BA%E4%BA%8E%E5%AE%98%E6%96%B9sdk%E6%8E%A5%E5%85%A5%E9%98%BF%E9%87%8C%E4%BA%91%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/</guid>
      <description>&lt;h4 id=&#34;引言&#34;&gt;引言&lt;/h4&gt;

&lt;p&gt;作为物联网开发者，ESP8266应该一点都不陌生了。只需十几块钱淘宝一个小开发板，就可以连上Wi-Fi接入互联网，尽情享受从手机端或Web端控制设备的乐趣。ESP8266接入Wi-Fi是没问题，但是用户端不能直接设计成与ESP8266通信，还是需要一个中心服务器作为用户端和设备端的代理。一种方案是自己搭建设计这么一个中心服务器，只是费时费力；另一种方案，就是直接使用大厂提供的物联网平台服务，使设计方案PaaS化。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>