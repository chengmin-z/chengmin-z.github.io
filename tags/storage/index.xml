<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Storage on cmHubs</title>
    <link>https://Zhangchengmin99.github.io/tags/storage/</link>
    <description>Recent content in Storage on cmHubs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[ A student iOS developer in BUPT 👨🏻‍💻 ]</copyright>
    <lastBuildDate>Thu, 03 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Zhangchengmin99.github.io/tags/storage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Core Data基本简介（一）—— Data Model与Core Data Stack</title>
      <link>https://Zhangchengmin99.github.io/2019/10/core-data%E5%9F%BA%E6%9C%AC%E7%AE%80%E4%BB%8B%E4%B8%80-data-model%E4%B8%8Ecore-data-stack/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Zhangchengmin99.github.io/2019/10/core-data%E5%9F%BA%E6%9C%AC%E7%AE%80%E4%BB%8B%E4%B8%80-data-model%E4%B8%8Ecore-data-stack/</guid>
      <description>前言 什么是Core Data？ Core Data 是一个对象图管理器，它定义和管理自己的对象和连接。 我们可以确定这些对象的组成以及它们之间的关系，还可以根据需要存储尽可能多的对象。 该系统负责对对象进行编码和解码，保持一致性以及以有效方式将对象图存储在文件中。
一 Data Model Core Data的对象图的结构是通过数据模型定义的。 这与前几章中创建的MVC模式的数据模型无关，“Core Data”模型是对图形将包含的对象类型（称为实体）及其连接（称为关系）的定义。可以通过代码创建模型，Xcode提供了实用的编辑器，我们可以使用它来定义图的结构。模型存储在文件中，然后编译文件并将其包含在为我们的应用程序创建的Core Data系统中。Xcode提供了创建此文件的模板。
（图1）
1-1 创建实体与属性 该文件可以使用我们想要的任何名称创建，但必须具有扩展名xcdatamodel。 创建后，它将与我们一起包含在我们的项目中其余文件。 单击它会显示Xcode编辑器，如下图所示。
（图2）
该模型包含三个主要组件：实体，属性和关系。 实体是对象将包含的内容的描述，属性是对象属性的描述，而关系是我们将被允许在对象之间建立的连接。 第一步是将实体添加到模型。 实体是通过编辑器下图底部的“添加实体”按钮创建的。 当我们按下此按钮时，Xcode将创建一个通用名称为“Entity”的实体。
（图3）
我们可以通过双击名称（图3，编号1）或编辑“数据模型检查器”面板中的字段（图3，编号2）来更改新创建的实体的名称。 实体定义将要成为对象图一部分的对象的组成，因此下一步是声明这些对象将要管理的值的类型。为此，实体包括属性。要添加属性，我们必须选择实体，然后按“属性”区域下的+按钮（图3，数字3）或按编辑器底部的“添加属性”按钮（图2，数字2）。该属性添加有通用名称“attribute”和数据类型为Undefined。同样，我们可以通过双击属性或在“数据模型检查器”面板中编辑“名称”字段来更改属性的名称。在我们的示例中，我们将实体Books命名为第一个属性标题（图4，编号1）。
（图4）
 重要信息：实体的名称必须以大写字母开头，属性和关系的名称必须以小写字母开头。  每个属性都必须与一种数据类型相关联，以便对象知道它们可以管理哪种类型的值（图4，编号2）。点击属性的类型，我们可以打开一个菜单以选择正确的数据类型。
而Transformable用于预定义和自定义对象，这些对象包括它们自己的NSCoder方法以对数据进行编码和解码。
Binary Data和Transformable选项经常使用用来存储图像，但是Transformable更为方便，因为它负责将UIImage对象归档并将其转换为Data值，而使用Binary Data选项则必须自己完成。
核心数据是为Objective-C设计的，因此它适用于对象，而不适用于原始值或结构。所有数字，包括整数，浮点数和布尔值，都存储为NSNumber值，因此我们必须将它们转换为此类的对象，反之亦然以进行处理。 一个实体可以包含我们的对象所需数量的属性。例如，我们可能会添加更多属性来补充这本书的信息。
（图5）
我们可能还包括了作者姓名的另一个属性，但这是我们必须开始考虑对象图的结构以及如何存储信息的时候。如果我们在Books实体中包括作者姓名的String类型属性，则每当用户插入一本新书时，都必须输入作者的姓名。这很容易出错，很费时间，并且当有同一位作者的几本书可供使用时，无法确保它们都具有相同的确切名称（一本书可能具有作者的中间名，而其他本书只是第一本书的中间名，例如）。接下来的图6显示了示例，其中有一个名为Authors的新实体，其中包含一个名为name的属性。
（图6）
实体是对象的蓝图，类似于类，因此我们使用它们来定义要存储的对象的特征。例如，当我们想在示例中存储一本新书时，我们将基于Books实体创建一个新对象。该对象将具有四个与其标题，年份，封面和缩略图的值相对应的属性。
1-2 创建关系 当我们要存储作者的信息时，也会发生同样的情况。我们基于Authors实体创建一个新对象，并将作者的名称分配给其name属性。最后，我们在存储空间中将有两个对象，一个用于书本，另一个用于作者。但是，如果我们以后想要检索这些对象，则需要一种方法来知道哪个Books对象与哪个Authors对象有关。我们必须连接这些对象，因此当我们查找Books对象时，我们还可以获得代表其作者的相应Authors对象，否则我们将无法在其中显示作者的姓名与书的信息。
要创建此连接，Data Model 必须包括关系。关系就像一个对象的属性，其中包含对另一个对象的引用。他们可以引用一个对象或一组对象。例如，在Books实体中，我们可以创建一个仅包含对Authors实体的一个对象的引用的关系，因为每本书只能有一位作者（在本例中，我们假设我们的应用程序仅存储编写的书籍由一位作者）。
相反，在Authors实体中，我们需要建立一个包含对多个Books对象的引用的关系，因为一个作者可能写了几本书，而不仅仅是一本书。核心数据根据它们可能引用的对象数量来调用这些关系。名称是一对一和一对多，它们是在“属性”区域下面的“关系”区域中按+按钮创建的。图7显示了一个为我们的示例的Books实体创建的关系，称为author（我们将其称为author，因为它将用于检索书籍的作者）。
（图7）
关系仅需要两个值：其名称（属性的名称）和目的地（其引用的对象的类型），但是它需要设置一些参数。 我们必须告诉模型该关系是否将是可选的，定义其类型（一对一或一对多），并确定如果删除源对象（删除规则），目标对象将发生什么情况。 选择关系后，所有这些选项在Data Model Inspector面板中都可用，如图8所示。
（图8）
默认情况下，该关系设置为“可选”，这意味着源可以连接到目标对象，也可以不连接（对象可以是作者或空），关系的类型设置为“一对一”（一本书只能有一位作者），“删除规则”设置为“无效”。
以下是此规则可用的所有值。
 Deny：
如果目标上至少有一个对象，则不会删除源（如果已将Authors对象分配给Books对象，则不会删除该书）。 Nullify：
删除对象之间的连接，但不删除目标位置的对象（如果删除了Books对象，则与该书关联的Authors对象将失去连接但不会被删除）。 Cascade：
删除源时，将删除目标位置的对象（如果删除了其中一本书籍，则将删除Authors对象）。 No Action：</description>
    </item>
    
  </channel>
</rss>